parameters:
  - name: awsSecret
  - name: awsKey
  - name: appName
  - name: appLocation
  - name: cloudService
  - name: serviceConnectionName
  - name: stageDeployment

jobs:
- job: 'Environment'
  pool: 
    vmImage: ubuntu-latest
  steps:
  # - task: AzureCLI@2
  #   displayName: 'Create storage account for Terraform'
  #   # condition: eq(${{ parameters.cloudService }}, 'Azure')
  #   inputs:
  #     azureSubscription: ${{ parameters.serviceConnectionName }}
  #     scriptType: 'bash'
  #     scriptLocation: inlineScript  
  #     inlineScript: |
  #       az storage account create --resource-group ${{ parameters.appName }}-rg --name ${{ parameters.appName }} --sku Standard_LRS --kind StorageV2 --encryption-services blob --access-tier Cool --allow-blob-public-access false
  #       az storage container create --name states --account-name ${{ parameters.appName }}
  #       az storage container create --name plans --account-name ${{ parameters.appName }}

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'AzureDevOps'
      scriptType: 'batch'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage account create --resource-group ${{ parameters.appName }}-rg --name ${{ parameters.appName }} --sku Standard_LRS --kind StorageV2 --encryption-services blob --access-tier Cool --allow-blob-public-access false
        az storage container create --name states --account-name ${{ parameters.appName }}
        az storage container create --name plans --account-name ${{ parameters.appName }}

  # - task: Bash@3
  #   displayName: "Ensure ${{ parameters.stageDeployment }}.tfvars"
  #   inputs:
  #     targetType: "inline"
  #     script: touch $(System.DefaultWorkingDirectory)/terraform-main/${{ parameters.stageDeployment }}.tfvars

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    inputs:
      terraformVersion: 0.14.7
    displayName: 'Install Terraform'
  - task: TerraformCLI@0
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true
    displayName: 'Terraform init'
  - task: TerraformCLI@0
    inputs:
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true
      commandOptions: -out=tfplan -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      environmentServiceName: 'AzureDevOps'
    displayName: 'Terraform plan'
  - task: TerraformCLI@0
    inputs:
      command: 'apply'
      allowTelemetryCollection: true
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      commandOptions: -auto-approve -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      environmentServiceName: 'AzureDevOps'
    displayName: 'Terraform Apply'
  
  # - task: ArchiveFiles@2
  #   displayName: Archive terraform-live and plan-files
  #   inputs:
  #     includeRootFolder: false
  #     rootFolderOrFile: $(System.DefaultWorkingDirectory)/terraform-main
  #     archiveType: tar
  #     archiveFile: terraform-live-${{ parameters.stageDeployment }}.tar

  # - task: ArchiveFiles@2
  #   displayName: Archive terraform-modules
  #   inputs:
  #     includeRootFolder: false
  #     rootFolderOrFile: $(System.DefaultWorkingDirectory)/terraform-modules
  #     archiveType: tar
  #     archiveFile: terraform-modules-${{ parameters.stageDeployment }}.tar

  - task: AzureCLI@2
    displayName: Copy ${{ parameters.stageDeployment }} plan of TF-Live to Storage
    inputs:
      azureSubscription: 'AzureDevOps'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az storage blob upload \
          --container-name plans \
          --file terraform-live-${{ parameters.stageDeployment }}.tar \
          --name $(Build.BuildNumber)-live-${{ parameters.stageDeployment }}.tar \
          --account-name "${{ parameters.appName }}"