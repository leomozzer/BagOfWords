parameters:
  - name: awsSecret
  - name: awsKey
  - name: appName
  - name: appLocation
  - name: cloudService
    default: "AWS"
    type: string
  - name: serviceConnectionName
  - name: stageDeployment
  - name: storageName

steps:

# Check ${{ parameters.cloudService }}. Default is AWS
#To use the AWS it's also needed a service connection

  - task: S3Download@1  
    displayName: 'Download state file if exists'
    continueOnError: true
    inputs:
      awsCredentials: 'AWS-Connection'
      regionName: 'us-east-1'
      bucketName: '${{ parameters.storageName }}'
      sourceFolder: 'apply'
      globExpressions: 'terraform-main-${{ parameters.stageDeployment }}.tar'
      targetFolder: '$(System.DefaultWorkingDirectory)'

  - task: CmdLine@2
    displayName: 'Extract state files'
    continueOnError: true
    inputs:
      script: 'tar -xvf terraform-main-${{ parameters.stageDeployment }}.tar'
      workingDirectory: '$(System.DefaultWorkingDirectory)/apply'

  - task: CmdLine@2
    displayName: 'Move state file'
    continueOnError: true
    inputs:
      script: |
        mv terraform.tfstate $(System.DefaultWorkingDirectory)/terraform-main
        mv terraform.tfstate.backup $(System.DefaultWorkingDirectory)/terraform-main
      workingDirectory: '$(System.DefaultWorkingDirectory)/apply'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    # condition: always()
    inputs:
      terraformVersion: 0.14.7
    displayName: 'Install Terraform'

  - task: TerraformCLI@0
    displayName: 'Terraform init'
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true

  - task: CmdLine@2
    displayName: "Terraform check format"
    inputs:
      script: 'terraform fmt -check -recursive -diff $(System.DefaultWorkingDirectory)/terraform-main'
    
  - task: TerraformCLI@0
    displayName: 'Terraform plan'
    inputs:
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true
      commandOptions: -out=${{ parameters.stageDeployment }}.plan -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      environmentServiceName: ${{parameters.serviceConnectionName}}
  
  - task: TerraformCLI@0
    displayName: 'Terraform Apply'
    # condition: always()
    continueOnError: true
    inputs:
      command: 'apply'
      allowTelemetryCollection: true
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      commandOptions: -auto-approve -lock-timeout=10m -input=false ${{ parameters.stageDeployment }}.plan"
      environmentServiceName: ${{parameters.serviceConnectionName}}

  - task: ArchiveFiles@2 
    displayName: 'Archive terraform-main and plan-files .tar'
    inputs:
      includeRootFolder: false
      rootFolderOrFile: $(System.DefaultWorkingDirectory)/terraform-main
      archiveType: tar
      archiveFile: $(System.DefaultWorkingDirectory)/terraform-main-${{ parameters.stageDeployment }}.tar
  
  - task: S3Upload@1
    # condition: always()
    displayName: 'Upload to S3 state file'
    inputs:
      awsCredentials: 'AWS-Connection'
      regionName: 'us-east-1'
      bucketName: '${{ parameters.storageName }}'
      sourceFolder: '$(System.DefaultWorkingDirectory)/terraform-main'
      globExpressions: 'terraform-main-${{ parameters.stageDeployment }}.tar'
      targetFolder: 'apply'
      createBucket: true