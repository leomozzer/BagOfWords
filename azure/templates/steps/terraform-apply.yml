parameters:
  - name: awsSecret
  - name: awsKey
  - name: appName
  - name: appLocation
  - name: cloudService
    default: "AWS"
    type: string
  - name: serviceConnectionName
  - name: stageDeployment
  - name: storageName
  - name: resourceGroup

steps:

# Check ${{ parameters.cloudService }}. Default is AWS
#To use the AWS it's also needed a service connection
  - task: S3Download@1  
    inputs:
      awsCredentials: 'AWS-Connection'
      regionName: 'us-east-1'
      bucketName: '${{ parameters.storageName }}'
      sourceFolder: 'plan'
      globExpressions: 'terraform-main-${{ parameters.stageDeployment }}.tar'
      targetFolder: '$(System.DefaultWorkingDirectory)'

  - task: CmdLine@2 
    inputs:
      script: 'tar -xvf terraform-main-${{ parameters.stageDeployment }}.tar'
      workingDirectory: '$(System.DefaultWorkingDirectory)/plan'
    displayName: 'Extract files'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    inputs:
      terraformVersion: 0.14.7
    displayName: 'Install Terraform'

  - task: TerraformCLI@0
    displayName: 'Import Resource group'
    inputs:
      command: 'import'
      workingDirectory: '$(System.DefaultWorkingDirectory)/plan'
      environmentServiceName: ${{parameters.serviceConnectionName}}
      resourceAddress: 'azurerm_resource_group.rg_app'
      resourceId: /subscriptions/$(SUBSCRIPTION-ID)/resourceGroups/${{ parameters.appName }}-rg
      commandOptions: -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      allowTelemetryCollection: true

  - task: TerraformCLI@0
    displayName: 'Import KeyVault'
    inputs:
      command: 'import'
      workingDirectory: '$(System.DefaultWorkingDirectory)/plan'
      environmentServiceName: ${{parameters.serviceConnectionName}}
      resourceAddress: 'azurerm_key_vault.keyvault'
      resourceId: /subscriptions/$(SUBSCRIPTION-ID)/resourceGroups/${{ parameters.appName }}-rg/providers/Microsoft.KeyVault/vaults/${{ parameters.appName }}-kv
      commandOptions: -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      allowTelemetryCollection: true

  # - task: TerraformCLI@0
  #   displayName: 'Import Cognitive'
  #   inputs:
  #     command: 'import'
  #     workingDirectory: '$(System.DefaultWorkingDirectory)/plan'
  #     environmentServiceName: ${{parameters.serviceConnectionName}}
  #     resourceAddress: 'azurerm_cognitive_account.text_translation'
  #     resourceId: /subscriptions/$(SUBSCRIPTION-ID)/resourceGroups/${{ parameters.appName }}-rg/providers/Microsoft.KeyVault/vaults/${{ parameters.appName }}-kv
  #     commandOptions: -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
  #     allowTelemetryCollection: true

  - task: TerraformCLI@0
    displayName: 'Terraform plan'
    inputs:
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/plan'
      allowTelemetryCollection: true
      commandOptions: -out=${{ parameters.stageDeployment }}.plan -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      environmentServiceName: ${{parameters.serviceConnectionName}}
  
  - task: TerraformCLI@0
    inputs:
      command: 'apply'
      allowTelemetryCollection: true
      workingDirectory: '$(System.DefaultWorkingDirectory)/plan'
      commandOptions: -auto-approve -lock-timeout=10m -input=false ${{ parameters.stageDeployment }}.plan"
      environmentServiceName: ${{parameters.serviceConnectionName}}
    displayName: 'Terraform Apply'