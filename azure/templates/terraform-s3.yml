parameters:
  - name: awsSecret
  - name: awsKey
  - name: appName
  - name: appLocation
  - name: cloudService
  - name: serviceConnectionName
  - name: stageDeployment
  - name: storageAccountName

jobs:
- job: 'Plan'
  condition: eq(${{ parameters.storageAccountName }}, 'true') #Remove later
  pool: 
    vmImage: ubuntu-latest
  steps:
  - task: CmdLine@2 
    inputs:
      script: 'mv terraform-copy.tfvars terraform-${{ parameters.stageDeployment}}.tfvars'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
    displayName: 'Rename .tfvars file'
  
  - task: CmdLine@2 
    inputs:
      script: 'terraform fmt -check -recursive -diff $(System.DefaultWorkingDirectory)/terraform-main'
    displayName: "Terraform check format"
  
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    inputs:
      terraformVersion: 0.14.7
    displayName: 'Install Terraform'

  - task: TerraformCLI@0
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true
    displayName: 'Terraform init'
    
  - task: TerraformCLI@0
    inputs:
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true
      commandOptions: -out=${{ parameters.stageDeployment }}.plan -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      environmentServiceName: 'AzureDevOps'
    displayName: 'Terraform plan'
  
  - task: ArchiveFiles@2
    displayName: 'Archive terraform-main and plan-files .tar'
    inputs:
      includeRootFolder: false
      rootFolderOrFile: $(System.DefaultWorkingDirectory)/terraform-main
      archiveType: tar
      archiveFile: $(System.DefaultWorkingDirectory)/terraform-main-${{ parameters.stageDeployment }}.tar

  - task: S3Upload@1
    displayName: 'Upload to S3'
    inputs:
      awsCredentials: 'AWS-Connection'
      regionName: 'us-east-1'
      bucketName: 'bagofwords-${{parameters.stageDeployment}}-assets'
      sourceFolder: '$(System.DefaultWorkingDirectory)'
      globExpressions: 'terraform-main-${{ parameters.stageDeployment }}.tar'
      targetFolder: 'plan'
      createBucket: true

- job: 'Apply'
  pool: 
    vmImage: ubuntu-latest
  # dependsOn: Plan
  # condition: succeeded()
  steps:

  - task: S3Download@1
    inputs:
      awsCredentials: 'AWS-Connection'
      regionName: 'us-east-1'
      bucketName: 'bagofwords-${{parameters.stageDeployment}}-assets'
      sourceFolder: 'plan'
      globExpressions: 'terraform-main-${{ parameters.stageDeployment }}.tar'
      targetFolder: '$(System.DefaultWorkingDirectory)/terraform-main'

  - task: CmdLine@2 
    inputs:
      script: 'ls'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
    displayName: 'List folder'

  - task: CmdLine@2 
    inputs:
      script: 'tar -xvf terraform-main-${{ parameters.stageDeployment }}.tar'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
    displayName: 'Extract files'

  - task: CmdLine@2 
    inputs:
      script: 'ls'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
    displayName: 'List folder'

  - task: CmdLine@2 
    inputs:
      script: 'ls'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
    displayName: 'List folder'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    inputs:
      terraformVersion: 0.14.7
    displayName: 'Install Terraform'
  
  - task: TerraformCLI@0
    inputs:
      command: 'apply'
      allowTelemetryCollection: true
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      commandOptions: -auto-approve -lock-timeout=10m ${{ parameters.stageDeployment }}.plan"
      environmentServiceName: 'AzureDevOps'
    displayName: 'Terraform Apply'