parameters:
  - name: awsSecret
  - name: awsKey
  - name: appName
  - name: appLocation
  - name: cloudService
    default: "AWS"
    type: string
  - name: serviceConnectionName
  - name: stageDeployment
  - name: storageName

steps:
  - task: CmdLine@2 
    displayName: 'Rename .tfvars file'
    inputs:
      script: 'mv terraform-copy.tfvars terraform-${{ parameters.stageDeployment}}.tfvars'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'  
    
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 0.14.7    

  - task: TerraformCLI@0
    displayName: 'Terraform init'
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true

  - task: CmdLine@2
    displayName: "Terraform check format"
    inputs:
      script: 'terraform fmt -check -recursive -diff $(System.DefaultWorkingDirectory)/terraform-main'
    
  - task: TerraformCLI@0
    displayName: 'Terraform plan'
    inputs:
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-main'
      allowTelemetryCollection: true
      commandOptions: -out=${{ parameters.stageDeployment }}.plan -input=false -var "app_name=${{ parameters.appName }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)" -var "location=${{ parameters.appLocation }}" -var "aws_secret=${{ parameters.awsSecret }}" -var "aws_key=${{ parameters.awsKey }}"
      environmentServiceName: 'AzureDevOps'
  
  - task: ArchiveFiles@2 
    displayName: 'Archive terraform-main and plan-files .tar'
    inputs:
      includeRootFolder: false
      rootFolderOrFile: $(System.DefaultWorkingDirectory)/terraform-main
      archiveType: tar
      archiveFile: $(System.DefaultWorkingDirectory)/terraform-main-${{ parameters.stageDeployment }}.tar

# Check ${{ parameters.cloudService }}. Default is AWS
#To use the AWS it's also needed a service connection
  - task: S3Upload@1
    displayName: 'Upload to S3'
    condition: and(contais(${{ parameters.cloudService }}, 'AWS'), true)
    inputs:
      awsCredentials: 'AWS-Connection'
      regionName: 'us-east-1'
      bucketName: '${{ parameters.storageName }}'
      sourceFolder: '$(System.DefaultWorkingDirectory)'
      globExpressions: 'terraform-main-${{ parameters.stageDeployment }}.tar'
      targetFolder: 'plan'
      createBucket: true
  
#az command to set up the storage account
  - task: AzureCLI@2
    displayName: 'Create storage account'
    condition: and(eq(${{ parameters.cloudService }}, 'Azure'), true)
    inputs:
      azureSubscription: 'AzureDevOps'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage account create --resource-group ${{ parameters.appName }}-rg --name ${{ parameters.storageName }} --sku Standard_LRS --kind StorageV2 --encryption-services blob --access-tier Cool --allow-blob-public-access false
        az storage container create --name plans --account-name ${{ parameters.storageName }}

  - task: AzureCLI@2
    displayName: Copy ${{ parameters.stageDeployment }} plan of TF-Live to Storage
    condition: and(eq(${{ parameters.cloudService }}, 'Azure'), true)
    inputs:
      azureSubscription: 'AzureDevOps'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az storage blob upload \
          --container-name plans \
          --file terraform-main-${{ parameters.stageDeployment }}.tar \
          --name $(Build.BuildNumber)-main-${{ parameters.stageDeployment }}.tar \
          --account-name "${{ parameters.storageName }}"